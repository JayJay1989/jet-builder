name: Check and build images
on:
  schedule:
    - cron: '0 0 * * *'
  workflow_dispatch:
  
jobs:
  check-versions:
    runs-on: ubuntu-latest
    outputs:
      image-matrix: ${{ steps.new_versions.outputs.image-matrix }}
    steps:
      - uses: actions/checkout@v2
      - name: Set up Python 3.9
        uses: actions/setup-python@v2
        with:
          python-version: 3.9
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          if [ -f requirements.txt ]; then pip install -r requirements.txt; fi
      - id: new_versions
        name: Check versions
        run: |
          $jsonString = $(python check_updates/check.py)
          echo $jsonString
          echo "image-matrix={'include':$jsonString}" >> $Env:GITHUB_OUTPUT
          echo "::set-output name=image-matrix::{'include':$jsonString}"
        env:
          REGISTRY_USERNAME: ${{ secrets.REGISTRY_USERNAME }}
          REGISTRY_PASSWORD: ${{ secrets.REGISTRY_PASSWORD }}
          REGISTRY: ${{ secrets.REGISTRY }}

  build-image:
    needs: check-versions
    runs-on: ubuntu-latest
    if: ${{ needs.check-versions.outputs.image-matrix != '{''include'':[]}' }}
    strategy:
      matrix: ${{ fromJson(needs.check-versions.outputs.image-matrix) }}
    steps:
      - name: Checkout repository and modules
        uses: actions/checkout@v2
        with:
          submodules: true
      - name: Login to Docker Hub
        uses: docker/login-action@v1
        with:
          username: ${{ secrets.REGISTRY_USERNAME }}
          password: ${{ secrets.REGISTRY_PASSWORD }}
          registry: ${{ secrets.REGISTRY }}
      - name: Build and push
        uses: docker/build-push-action@v2
        with:
          context: .
          file: projector-docker/Dockerfile
          build-args: |
            buildGradle=true
            downloadUrl=${{ matrix.download }}
          tags: |
            ${{ matrix.image }}:${{ matrix.version }}
            ${{ matrix.image }}:latest
          push: true
